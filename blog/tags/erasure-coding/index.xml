<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Erasure Coding on The Evening Paper</title>
    <link>https://millyz.github.io/blog/tags/erasure-coding/</link>
    <description>Recent content in Erasure Coding on The Evening Paper</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 13 Feb 2019 10:50:14 +0800</lastBuildDate>
    
	<atom:link href="https://millyz.github.io/blog/tags/erasure-coding/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A ZigZag-Decodable Code with the MDS Property for Distributed Storage Systems, ISIT13</title>
      <link>https://millyz.github.io/blog/posts/zzdc-isit13/</link>
      <pubDate>Wed, 13 Feb 2019 10:50:14 +0800</pubDate>
      
      <guid>https://millyz.github.io/blog/posts/zzdc-isit13/</guid>
      <description>Summary This paper presents ZigZag-Decodable Code (ZD), a new vector code that has the MDS property. For data retrieval, only XOR operations are needed while for node failure, uncoded and exact repair can be performed. Note that uncoded repair means that a newcomer (to replace the failed node) can simply download data from d survivor nodes without any encoding/decoding operations. It allows fast encoding and decoding (operate over GF(2)) because it does not require a large finite-field size.</description>
    </item>
    
    <item>
      <title>Cassandra - A Decentralized Structured Storage System</title>
      <link>https://millyz.github.io/blog/posts/cassandra/</link>
      <pubDate>Mon, 28 Jan 2019 17:21:43 +0800</pubDate>
      
      <guid>https://millyz.github.io/blog/posts/cassandra/</guid>
      <description>Cassandra is a distributed storage system for structured data spread out across many commodity servers, while providing high availability, durability, and scalability. It achieves high write throughput and read efficiency.
System architecture  Partition, Membership, and Scalability  Cassandra partitions data across the cluster using consistent hashing (an order preserving hash function). Each data item identified by a key is assigned to a node, which is the coordinator of for this key.</description>
    </item>
    
    <item>
      <title>Clay codes: Moulding MDS Codes to Yield an MSR Code, FAST &#39;18</title>
      <link>https://millyz.github.io/blog/posts/claycodes-fast18/</link>
      <pubDate>Mon, 29 Oct 2018 19:00:00 +0800</pubDate>
      
      <guid>https://millyz.github.io/blog/posts/claycodes-fast18/</guid>
      <description>The title attracts me at the first sight. How do the authors switch a MDS code to a MSR code though they belong to different classes of erasure codes from my understanding? After reading the abstract, a big question mark arises over my head as the properties of this code seems rather promising. This new code, termed as Clay codes (short for Coupled-Layer), achieves the following properties:
 Low storage overhead; Optimal in repair bandwidth, sub-packetization level and disk I/O; Uniform repair performance of data and parity nodes; Support for both single and multiple-node repairs, while permitting faster and more efficient repair.</description>
    </item>
    
  </channel>
</rss>